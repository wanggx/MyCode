//
//  HomePageCollectionView.swift
//  Demo
//
//  Created by gxwang on 15/8/24.
//  Copyright (c) 2015å¹´ gxwang. All rights reserved.
//

import Foundation
import UIKit

@objc(pHomeCollectionView)
protocol pHomeCollectionView {
    optional func heightForCell(indexPath:NSIndexPath)->CGFloat
    optional func spaceForCell(indexPath:NSIndexPath)->CGFloat
}

@objc(pHomePageCollectDelegate)
protocol pHomePageCollectDelegate {
    optional func getDataList() -> [AnyObject]
    optional func didSelectItemAtIndexPath(collectionView:UICollectionView,indexPath:NSIndexPath)
}

class HomePageCollectionView : UICollectionView ,UICollectionViewDelegate,UICollectionViewDataSource, pHomeCollectionView,SaPullToRefreshDelegate
{
    var reloading: Bool = false
    var pullRefreshView:SaPullToRefreshView!
    weak var dataDelegate:pHomePageCollectDelegate?
    
    func initColelctionView() {
        self.backgroundColor = UIColor.clearColor()
        self.dataSource = self
        self.delegate = self
        self.registerNib(UINib(nibName: "HomePageCell", bundle: NSBundle.mainBundle()), forCellWithReuseIdentifier: "HomePageCell")
    }
    
    func initRefreshView() {
        if pullRefreshView == nil {
            pullRefreshView = SaPullToRefreshView(frame: CGRectMake(0, -self.frame.height, self.frame.width, self.frame.height))
            pullRefreshView.delegate = self
            self.addSubview(pullRefreshView)
        }
    }
    
    func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {
        return 2
    }
    
    func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if section == 0 {
            return 1
        } else if section == 1 {
            return 7
        }
        return 0
    }
    
    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
        var cell = collectionView.dequeueReusableCellWithReuseIdentifier("HomePageCell", forIndexPath: indexPath) as! HomePageCollectionViewCell
        
        cell.initView()

        return cell
    }
    
    
    func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {
        dataDelegate?.didSelectItemAtIndexPath?(collectionView, indexPath: indexPath)
    }
    
    
    func spaceForCell(indexPath: NSIndexPath) -> CGFloat {
        return 5
    }
    
    func heightForCell(indexPath: NSIndexPath) -> CGFloat {
        if indexPath.section == 0 {
            return 80
        } else {
            if indexPath.item == 0 {
                return 70
            }
            return 230
        }
    }
    
    func reloadCollectionViewDataSource() {
        reloading = true
    }
    
    func pullToRefreshDidTrigger(view: SaPullToRefreshView) -> () {
        reloadCollectionViewDataSource()
        
        let delay = 4.0 * Double(NSEC_PER_SEC)
        let time  = dispatch_time(DISPATCH_TIME_NOW, Int64(delay))
        dispatch_after(time, dispatch_get_main_queue(), {
            self.reloading = false
            self.pullRefreshView.refreshScrollViewDataSourceDidFinishedLoading(self)
        })
    }
    
    func scrollViewDidScroll(scrollView: UIScrollView) {
        pullRefreshView?.refreshScrollViewDidScroll(scrollView)
    }
    
    func scrollViewDidEndDragging(scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        pullRefreshView?.refreshScrollViewDidEndDragging(scrollView)
    }
    
    func pullToRefreshIsLoading(view: SaPullToRefreshView) -> Bool {
        return reloading
    }
    
    func pullToRefreshLastUpdated(view: SaPullToRefreshView) -> NSDate {
        return NSDate()
    }

    override func layoutSubviews() {
        super.layoutSubviews()
        log.info("collectionView layoutSubviews")
    }
    
}
